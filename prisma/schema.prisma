// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  forms     Form[]
  responses FormResponse[]

  @@map("users")
}

model Form {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      FormStatus @default(DRAFT)
  slug        String?  @unique
  tags        String[]
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  fields     FormField[]
  responses  FormResponse[]

  @@map("forms")
}

model FormField {
  id         String   @id @default(cuid())
  type       FieldType
  label      String
  placeholder String?
  required   Boolean  @default(false)
  options    String[] // For dropdown, radio, checkbox fields
  settings   Json     // Additional field-specific settings
  order      Int      // Field order in the form
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  formId String
  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
  values ResponseField[]

  @@map("form_fields")
}

model FormResponse {
  id             String      @id @default(cuid())
  status         ResponseStatus @default(NEW)
  respondentEmail String?
  ipAddress      String?
  userAgent      String?
  submittedAt    DateTime    @default(now())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  formId String
  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId String?
  user   User?  @relation(fields: [userId], references: [id])
  fields ResponseField[]

  @@map("form_responses")
}

model ResponseField {
  id       String @id @default(cuid())
  value    String // JSON string to handle different field types
  createdAt DateTime @default(now())

  // Relations
  responseId String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  fieldId    String
  field      FormField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([responseId, fieldId])
  @@map("response_fields")
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FieldType {
  SHORT_TEXT
  LONG_TEXT
  EMAIL
  PHONE
  NUMBER
  URL
  DATE
  DROPDOWN
  RADIO
  CHECKBOX
  RATING
  FILE_UPLOAD
  SECTION
}

enum ResponseStatus {
  NEW
  READ
  FLAGGED
  ARCHIVED
}

model AppSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  category  String   // general, email, security, integrations
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("app_settings")
}

model Webhook {
  id          String   @id @default(cuid())
  url         String
  events      String[] // form.submitted, response.created, etc.
  secret      String?  // For webhook signature validation
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("webhooks")
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  permissions String[] // forms.read, forms.write, responses.read, etc.
  lastUsed    DateTime?
  expiresAt   DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("api_keys")
}

model UploadedFile {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int      // Size in bytes
  path        String   // Storage path
  url         String?  // Public URL if applicable
  fieldId     String?  // Associated form field if uploaded via form
  responseId  String?  // Associated form response
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("uploaded_files")
}